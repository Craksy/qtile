#+TITLE:     Litterate Qtile Configuration
#+AUTHOR:    Silas Wagner
#+EMAIL:     craksyw@gmail.com

* Table of Contents :TOC_3:
- [[#introduction][Introduction]]
- [[#configuration][Configuration]]
  - [[#imports][Imports]]
    - [[#qtile][Qtile]]
    - [[#other-imports][Other imports]]
  - [[#definitions][Definitions]]
    - [[#qtile-configuration-variables][Qtile configuration variables]]
    - [[#themes][Themes]]
    - [[#widget-defaults][Widget defaults]]
  - [[#functions][Functions]]
    - [[#create_bar][create_bar]]
    - [[#set_theme][set_theme]]
  - [[#groups][Groups]]
  - [[#keybindings][Keybindings]]
    - [[#window-actions][Window actions]]
    - [[#run-programs][Run Programs]]
    - [[#layout-actions][Layout actions]]
    - [[#group-actions][Group actions]]
    - [[#toggles][Toggles]]
    - [[#chain-root][Chain root]]
    - [[#actual-root][Actual root]]
    - [[#mouse-actions][Mouse actions]]
  - [[#layouts][Layouts]]
  - [[#screenbar][Screen/Bar]]
  - [[#hooks][Hooks]]
    - [[#client-new][Client new]]
    - [[#startup-once][Startup once]]
- [[#hacks][Hacks]]
  - [[#libqtile-hacks][libqtile hacks]]
  - [[#widgets][Widgets]]
  - [[#styling][Styling]]
- [[#ideas-for-improvement-69][Ideas for improvement]]
- [[#custom-classes][Custom classes]]
- [[#issues-12][Issues]]
  - [[#x-fix-modifiers][[X] Fix modifiers]]
  - [[#--the-bar-and-all-widgets-duplicates-upon-switching-themes][[ ] the bar and all widgets duplicates upon switching themes]]

* Introduction
This document used to be a playground to learn about ~babel :tangle~ but is now
home to my personal qtile config.

This config focuses heavily on keybindings and styling.
It relies on a few hacks i made to the Qtile source, to make keybindings behave
how i want them to, and to interact nicely with a custom widget i made. see
hacks and widgets below.

This config is still very much a work in progress. There are plenty of features
i would like to add, things that could be more effecient and things that could
be more pleasing to the eye.

* Configuration
The actual config. This is where i organise the code that will be 'tangled' to
~config.py~
** Imports
*** Qtile
Let's grab all the libqtile stuff
#+BEGIN_SRC python :tangle config.py
# This is a test
from libqtile import window, bar, layout, widget, extension, hook
from libqtile.config import (
    Click,
    Drag,
    Group,
    Key,
    Screen,
    Match,
    ScratchPad,
    DropDown,
    KeyChord)
from libqtile.lazy import lazy
from libqtile.log_utils import logger
from libqtile.utils import guess_terminal
#+END_SRC

*** Other imports
General imports that are not specific to Qtile
#+BEGIN_SRC python :tangle config.py
from typing import List
import subprocess
from subprocess import call
import os
import datetime
from bitstring import BitString
from itertools import chain
from color_themes import gruvbox, Style, dracula, solarized, monokai
from desktop_widget import WkWidget
#+END_SRC

** Definitions
*** Qtile configuration variables
Qtile expects these to be here
#+BEGIN_SRC python :tangle config.py
dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
auto_fullscreen = True
focus_on_window_activation = "smart"
wmname = "LG3D"
#+END_SRC

Misc global variables than needs to be available to the rest of the
code.
#+BEGIN_SRC python :tangle config.py
mod = "mod4"
terminal = "konsole"
#+END_SRC
*** Themes
#+BEGIN_SRC python :tangle config.py
styles = {
    'dracula': Style(palette=dracula,
                     foreground='white',
                     background='black',
                     primary='blue',
                     secondary='pink',
                     tetriary='purple',
                     emacs_theme='doom-dracula',
    ),
    'gruvbox' : Style(palette=gruvbox,
                      foreground='white',
                      background='black',
                      primary='green',
                      secondary='orange',
                      tetriary='blue',
                      emacs_theme='doom-gruvbox',
    ),
    'solarized' : Style(palette=solarized,
                        foreground='white',
                        background='black',
                        primary='green',
                        secondary='blue',
                        tetriary='orange',
                        emacs_theme='doom-solarized-dark',


    ),
    'monokai' : Style(palette=monokai,
                        foreground='white',
                        background='black',
                        primary='pink',
                        secondary='green',
                        tetriary='orange',
                        emacs_theme='doom-molokai'
    ),
}
current_style = styles['dracula']
#+END_SRC

*** Widget defaults
#+BEGIN_SRC python :tangle config.py
widget_defaults = dict(
    font='FiraCode NF',
    fontsize=12,
    padding=3,
    foreground=current_style['foreground']
)
extension_defaults = widget_defaults.copy()
#+END_SRC

** Functions
*** create_bar
this is such a hackjob. i really need to find a better solution for this
basically i'm using a function to initialize my bar so that i can call this if i
want to recreate it. I use this when changing theme so i can redraw the bar with
new attributes.

#+BEGIN_SRC python :tangle config.py
def create_bar(qtile = None):
    global current_style
    main_bar = bar.Bar(
        [
            widget.GroupBox(fontsize=17,
                            active=current_style['primary'],
                            block_highlight_text_color=current_style['foreground'],
                            this_current_screen_border=current_style['primary'],
                            highlight_method="block",
                            rounded=False),
            widget.Prompt(),
            WkWidget(style=current_style),
            widget.Spacer(),
            widget.Clock(format='   %a %d-%m %H:%M   ',
                         foreground=current_style['secondary']),

            widget.TextBox(' ', fontsize=22),
            widget.KeyboardLayout(configured_keyboards=['us_custom', 'dk', ''],
                                    display_map={'us_custom': 'code', 'dk': 'DK'}),
            widget.Systray(),
            widget.Volume(emoji=False, mute_command=[
                        'amixer',
                        'q',
                        'set',
                        'Master',
                        'toggle']),
        ], 24, background=current_style['background']
    )

    if qtile is None:
        return main_bar
    if qtile.current_screen:
        for w in qtile.current_screen.top.widgets:
            del w
        del qtile.current_screen.top
    qtile.current_screen.top = main_bar
    qtile.current_screen.resize()
#+END_SRC

*** set_theme
Set theme and redraw the bar
also changes theme in emacs but this requires confirmation the first time using
a new theme.
#+BEGIN_SRC python :tangle config.py
def set_theme(theme_name):
    def __inner__(qtile):
        global current_style
        if theme_name in styles:
            current_style = styles[theme_name]
            create_bar(qtile)
        if current_style.emacs_theme:
            emacs_command= '(load-theme \'{})'.format(current_style.emacs_theme)
            subprocess.call(['emacsclient', '-e', emacs_command])
        else:
            raise Exception('Unrecognized theme {}'.format(theme_name))
    return __inner__
#+END_SRC

** Groups
These are workspaces. a place where a certain type of programs belong or a
place that supports a certain type of workflow.

#+name:groups_table
| Group Name | Label icon | layout    |
|------------+------------+-----------|
| Dev        | ✎          | max       |
| Home       |           | monadtall |
| Web        | 爵         | max       |
| IM         |           | max       |
| Python     |           | stack     |
| Sys        |           | monadtall |
| Misc       |           | monadtall |

Here i append a ~Group()~ object to the ~groups~ list for each entry in the
table above. The label of each group id the icon and name of the group seperated
by a space.

#+BEGIN_SRC python :var group_table=groups_table :colnames yes :tangle config.py
groups = [
    Group(name=n, label = f'{ic} {n}', layout=la) for n, ic, la in group_table
]
#+END_SRC


(at this point it would've probably been prettier to just use a regular loop. i
do love me some list comprehensions though)


#+BEGIN_SRC python :tangle config.py
groups.append(ScratchPad("scratchpad", [
    DropDown("term", "konsole", opacity=0.8)
]))
#+END_SRC

** Keybindings
*** Window actions
**** Resizing
these keybindings are for resizing windows. possibly we should have a group for
each layout, as each layout has it's own ways to handle that.

#+BEGIN_SRC python :tangle config.py
resize_commands = [
    Key([], 'l', lazy.layout.grow_main(), desc='Grow main'),
    Key([], 'h', lazy.layout.shrink_main(), desc='Shrink main'),
    Key([], 'space', lazy.function(lambda q: ...)),
]
#+END_SRC

**** Moving
Bindings for moving windows around the screen.
should be specific to each layout.

#+BEGIN_SRC python :tangle config.py
win_move_commands = [
    Key([], 'j', lazy.layout.shuffle_down(), desc='shuffle up'),
    Key([], 'k', lazy.layout.shuffle_up(), desc='shuffle down'),
]
#+END_SRC

**** Send to Group
keybindings to send the current window to another window group.
#+BEGIN_SRC python :tangle config.py
to_group_commands = [
    Key([], '1', lazy.window.togroup('Dev', switch_group=True)),
    Key([], '2', lazy.window.togroup('Home', switch_group=True)),
    Key([], '3', lazy.window.togroup('Web', switch_group=True)),
    Key([], '4', lazy.window.togroup('Python', switch_group=True)),
    Key([], '5', lazy.window.togroup('IM', switch_group=True)),
    Key([], '6', lazy.window.togroup('Sys', switch_group=True)),
    Key([], '7', lazy.window.togroup('Misc', switch_group=True)),

    Key([], 'd', lazy.window.togroup('Dev', switch_group=True)),
    Key([], 'h', lazy.window.togroup('Home', switch_group=True)),
    Key([], 'w', lazy.window.togroup('Web', switch_group=True)),
    Key([], 'p', lazy.window.togroup('Python', switch_group=True)),
    Key([], 'i', lazy.window.togroup('IM', switch_group=True)),
    Key([], 's', lazy.window.togroup('Sys', switch_group=True)),
    Key([], 'm', lazy.window.togroup('Misc', switch_group=True)),
]
#+END_SRC

**** Root
#+BEGIN_SRC python :tangle config.py
w_commands = [
    Key([], 'q', lazy.window.kill(), desc='Kill'),
    Key([], 'space', lazy.window.toggle_fullscreen(), desc='Toggle fullscreen'),
    Key([], 'w', lazy.spawn('rofi -show window'), desc='$Rofi windows'),
    KeyChord([mod], 'r', resize_commands, mode='Resize'),
    KeyChord([], 'r', resize_commands, desc='Resize', mode='Resize'),
    KeyChord([mod], 'm', win_move_commands, mode='Win Move'),
    KeyChord([], 'm', win_move_commands, desc='Move', mode='Win Move'),
    KeyChord([mod], 's', to_group_commands),
    KeyChord([], 's', to_group_commands, desc='Send to Group'),
]
#+END_SRC

*** Run Programs
Not much to say here. Just a buncha ~lazy.spawn()~ calls, binding my most used
programs to keys.

#+BEGIN_SRC python :tangle config.py
r_commands = [
    Key([], 'd', lazy.spawn('rofi -show drun'), desc='$Rofi drun'),
    Key([], 'e', lazy.spawn('emacs'), desc='Emacs'),
    Key([], 'f', lazy.spawn('nautilus'), desc='Files'),
    Key([], 'r', lazy.spawn('konsole -e ranger'), desc='Ranger'),
    Key([], 'v', lazy.spawn('konsole -e nvim'), desc='Nvim'),
    Key([], 'w', lazy.spawn('chromium'), desc='Web (chromium)'),
    Key([], 'q', lazy.spawn('qutebrowser'), desc='Qutebrowser'),
]
#+END_SRC

*** Layout actions
These are just commands to change the current layout. perhaps more interesting
things could be done here?

#+BEGIN_SRC python :tangle config.py
l_commands = [
    Key([], 'm',   lazy.group.setlayout('monadtall'), desc='MonadTall'),
    Key([], 'w',   lazy.group.setlayout('monadwide'), desc='MonadWide'),
    Key(['shift'], 'm',   lazy.group.setlayout('monadwide'), desc='MonadWide'),
    Key([], 'z',   lazy.group.setlayout('max'), desc='Zoom (max)'),
    Key([], 's',   lazy.group.setlayout('stack'), desc='Stack'),
    Key([], 'Tab', lazy.next_layout(), desc='Next layout'),
]
#+END_SRC

*** Group actions
just bindings to move to specific layouts
#+BEGIN_SRC python :tangle config.py
g_commands = [
    Key([], 'd', lazy.group['Dev'].toscreen(), desc='Open Dev group'),
    Key([], 'h', lazy.group['Home'].toscreen(), desc='Open Home group'),
    Key([], 'w', lazy.group['Web'].toscreen(), desc='Open Web group'),
    Key([], 'p', lazy.group['Python'].toscreen(), desc='Open Python group'),
    Key([], 'i', lazy.group['IM'].toscreen(), desc='Open IM group'),
    Key([], 's', lazy.group['Sys'].toscreen(), desc='Open System group'),
]
#+END_SRC

*** Toggles
A group of keybindings dedicated to toggling or cycling through misc. settings
**** Theme switch
a little buggy but it works.
#+BEGIN_SRC python :tangle config.py
theme_switch_commands = [
    Key([], 'g', lazy.function(set_theme('gruvbox')), desc='Gruvbox'),
    Key([], 'd', lazy.function(set_theme('dracula')), desc='Dracula'),
    Key([], 's', lazy.function(set_theme('solarized')), desc='Solarized'),
    Key([], 'm', lazy.function(set_theme('monokai')), desc='Monokai'),
]
#+END_SRC

**** Toggles root
#+BEGIN_SRC python :tangle config.py
t_commands = [
    Key([], 'k', lazy.widget['keyboardlayout'].next_keyboard(), desc='Cycle xkb layouts'),
    Key([], 't', lazy.group['scratchpad'].dropdown_toggle('term'), desc='dropdown term'),
    KeyChord([], 's', theme_switch_commands, desc='Styles'),
]
#+END_SRC

*** Chain root
This is the root of the "leader key chain", ie. these are the keybindings that
are first available after pressing the leader key. Most keys here have a
duplicate with the mod key added. This is in case we don't actually release the
leader before pressing the next key, and it not really intended to be used as it
is.

#+BEGIN_SRC python :tangle config.py
chain_root = [
    KeyChord([mod], 'w', w_commands),
    KeyChord([], 'w', w_commands, desc='Windows'),
    KeyChord([mod], 't', t_commands),
    KeyChord([], 't', t_commands, desc='Toggles'),
    KeyChord([mod], 'r', r_commands),
    KeyChord([], 'r', r_commands, desc='Run programs'),
    KeyChord([mod], 'm', l_commands),
    KeyChord([], 'm', l_commands, desc='Layouts'),
    KeyChord([mod], 'g', g_commands),
    KeyChord([], 'g', g_commands, desc='Groups'),
    Key([mod], 'Tab', lazy.layout.next()),
    Key([], 'Tab', lazy.layout.next(), desc='Next win'),

    Key([mod], "c", lazy.spawn('dmenu_configs')),
    Key([mod], "p", lazy.spawn('wallpaper-dmenu.sh')),
    Key([], "c", lazy.spawn('dmenu_configs'), desc='$Configs'),
    Key([], "p", lazy.spawn('wallpaper-dmenu.sh'), desc='$Wallpapers'),
    Key([], 'Return', lazy.spawn(terminal), desc='Launch terminal'),
    Key([mod], 'Return', lazy.spawn(terminal), desc=''),

    Key([], "j", lazy.layout.down(),
        desc="Move down"),
    Key([], "k", lazy.layout.up(),
        desc="Move up"),
    Key([], "h", lazy.layout.left(),
        desc="Move left"),
    Key([], "l", lazy.layout.right(),
        desc="Move right"),
    Key([mod], "j", lazy.layout.down(),
        desc=""),
    Key([mod], "k", lazy.layout.up(),
        desc=""),
    Key([mod], "h", lazy.layout.left(),
        desc=""),
    Key([mod], "l", lazy.layout.right(),
        desc=""),
    Key(['control'], 'r', lazy.restart()),
    Key([mod], 'colon', lazy.qtilecmd(), desc=''),
    Key([], 'colon', lazy.qtilecmd(), desc='Qtile Cmd'),
]
#+END_SRC

**** Group keys
Here we loop through all of the groups and bind number keys for swapping and
moving.

#+BEGIN_SRC python :tangle config.py
group_keys = []
for i,g in enumerate(groups):
    if g.label == '':
        continue
    group_keys.extend([
        # mod1 + letter of group = switch to group
        Key([], str(i+1), lazy.group[g.name].toscreen(),
            desc="go to {}".format(g.label)),

        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], str(i+1), lazy.window.togroup(g.name, switch_group=True),
            desc=""),
        Key([mod], str(i+1), lazy.group[g.name].toscreen(),
            desc="".format(g.label)),
        # Or, use below if you prefer not to switch to that group.
        # # mod1 + shift + letter of group = move focused window to group
        # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
        #     desc="move focused window to group {}".format(i.name)),
    ])
chain_root[0:0] = group_keys
#+END_SRC

*** Actual root
And this is the where we add our leader to Qtiles keys list.
#+BEGIN_SRC python :tangle config.py
keys = [
    KeyChord([], 'Super_L', chain_root),
    KeyChord([], 'Super_R', chain_root),
]
#+END_SRC

*** Mouse actions
While technically not keybindings i sort of feel these belong here. I don't
actually use them. they are just here to remind me that it's an option.
#+BEGIN_SRC python :tangle config.py
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]
#+END_SRC

** Layouts
This is where we define layouts. not an aweful lot to tell here.

#+BEGIN_SRC python :tangle config.py
layouts = [
    layout.Max(),
    layout.Stack(border_width=2, num_stacks=2, border_focus=current_style['tetriary']),
    # Try more layouts by unleashing below layouts.
    layout.Bsp(),
    # layout.Columns(),
    # layout.Matrix(),
    layout.MonadTall(border_width=2, margin=5, border_focus=current_style['secondary']),
    layout.MonadWide(border_width=2, margin=10, border_focus=current_style['secondary']),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]
#+END_SRC


The float rules decide which programs are automatically floating upon spawning.
#+BEGIN_SRC python :tangle config.py
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    {'wmclass': 'confirm'},
    {'wmclass': 'dialog'},
    {'wmclass': 'download'},
    {'wmclass': 'error'},
    {'wmclass': 'file_progress'},
    {'wmclass': 'notification'},
    {'wmclass': 'splash'},
    {'wmclass': 'toolbar'},
    {'wmclass': 'confirmreset'},  # gitk
    {'wmclass': 'makebranch'},  # gitk
    {'wmclass': 'maketag'},  # gitk
    {'wname': 'branchdialog'},  # gitk
    {'wname': 'pinentry'},  # GPG key password entry
    {'wmclass': 'ssh-askpass'},  # ssh-askpass
    {'wname': 'WhichKey Widget'},
    # {'wname': 'Execute D-Bus Method'},
])
#+END_SRC

** Screen/Bar
I currently only have a single screen and i only use a single bar so they go
together for now. One possibility however could be to make several different
bars, and then change them out depending on current mode.

This is a bit awkward. This used to be where i defined all my widgets but is now
just a call to ~create_bar~.
#+BEGIN_SRC python :tangle config.py
screens = [
    Screen(top=create_bar()),
]
#+END_SRC

** Hooks
Here are some functions that hook into the qtile event loop. They mostly just
run some scripts at startup and sends windows to appropriate groups.
*** Client new
Called whenever a new client is spawned.
#+BEGIN_SRC python :tangle config.py
@hook.subscribe.client_new
def client_new(client: window.Window):
    if client.name in ('qutebrowser', 'chromium'):
        client.togroup('Web')
#+END_SRC

*** Startup once
Runs only a single time on qtile startup ie. not upon restarting qtile.
#+BEGIN_SRC python :tangle config.py
@hook.subscribe.startup
def init():
    startup_script_path = os.path.expanduser('~/.config/qtile/startup.sh')
    subprocess.call([startup_script_path])
#+END_SRC

* Hacks
** libqtile hacks
In order to make keychords behave the way i wanted to, i had to make some minor
changes to qtile. These changes simply make unbound keys break keychords, and
allows adding descriptions for the which-key widget.

I'll make it available here once i cleaned it up a little, but these
are the basic modifications i made:

- added a method that grabs every single key except for modifiers, without binding an action to it.
- call abovementioned method whenever we enter a keychord in order to receive events on all keypresses.
- made qtile break current keychord if an unbound key is pressed.
- Gave KeyChords a description property.

** Widgets
I have made a widget inspired by emacs which-key, to help remember seldomly used
bindings, and to aid in memorizing new ones.

It's still a work in progress and is currently pretty tightly coupled with my
specific setup and use case.

** Styling
I made a style module contained in ~color_themes.py~ which helps having
consistent theming and makes it easy to add additional themes.
* Ideas for improvement [6/9]
Features i have not yet implemented in my config, but i feel should be there.

- [X] i actually do not have any keybindings to send windows to other groups.
- [ ] My window resize bindings currently only work for the xmonad family of
  layouts. should be configured for stack/split as well.
- [X] Add more color schemes than gruvbox.
- [ ] Put a delay on the which-key widget.
- [X] add key bindings to change keyboard layout.
- [X] some sort of collection of styles/themes so i can swap between them.
- [X] make a function to reconfigure the bar with a different theme.
- [X] Have a dropdown terminal
- [ ] Find a way to have more features available through qtilecmd

* Custom classes
Nothing here yet. In this section i plan to describe various custom classes and
widgets that my config uses
* Issues [1/2]
Actual bugs and shitty code to be fixed goes here.

** [X] Fix modifiers
currently bindings that include modifier keys are ignored entirely by which-key,
so that duplicates don't show up twice. However this also prevents bindings with
intentional modifier keys from being displayed.

Furthermore the current system only display the actual key, and always in
lowercase

** [ ] the bar and all widgets duplicates upon switching themes
